# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# clip_dfs_to_parcel.py
# Created on: 2016-05-02 14:58:59.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import time
import os

print "the function has started..."
startTime = time.time()

localPath = "C:\\path\\to\\shapefiles\\"
arcpy.env.workspace = r'C:\\path\\to\\file.gdb'
arcpy.env.overwriteOutput = True


# Local variables:
parcels = "parcel_trim.shp"

outPoly = "dfsSubset.shp"

spatialref = arcpy.Describe(localPath + parcels).SpatialReference
print spatialref.name

arcpy.CreateFeatureclass_management(localPath, outPoly, "Polygon", "", "", "", spatialref)


arcpy.AddField_management(localPath + outPoly, "APN_8", "TEXT", 8, "", "", "APN_8", "NULLABLE")
outCursor = arcpy.da.InsertCursor(localPath + outPoly, ["APN_8", "SHAPE@"])

desc = arcpy.Describe(localPath + parcels)
print desc.shapeType
print arcpy.Exists(localPath + parcels)

#matchTime = time.time()
counter = 0

with arcpy.da.SearchCursor(localPath + parcels, ["APN_8", "SHAPE@"]) as parcelCursor:
        for parcelRow in parcelCursor:
            parcelId = parcelRow[0]
            parcelGeom = parcelRow[1]

            ##first find centroid
            cent = arcpy.FeatureToPoint_management(parcelGeom, arcpy.Geometry(), "INSIDE")

            ##then buffer to make houses
            temp = cent
            h_buff = arcpy.Buffer_analysis(cent, arcpy.Geometry(), "30 FEET", "FULL", "ROUND", "NONE", "", "PLANAR")

            ##then buffer houses (outside only to make the dfs donuts
            dfs_buff = arcpy.Buffer_analysis(h_buff, arcpy.Geometry(), "100 FEET", "OUTSIDE_ONLY", "ROUND", "NONE", "", "PLANAR")
            
           
            dfspoly = dfs_buff[0]

            ##then intersect
            intersect = dfspoly.intersect(parcelGeom, 4)

            ##then put in the new file
            outCursor.insertRow([parcelId, intersect])
            if counter % 100 == 0: #don't print every line
                print "complete for " + str(parcelId)
                print "number of dfs completed = " + str(counter)
            counter += 1


endTime = time.time()
print "the function took " + str(endTime - startTime)


        
